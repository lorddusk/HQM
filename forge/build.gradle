plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

architectury {
    platformSetupLoomIde()
    forge()
}

dependencies {
    forge "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    compileOnly("org.jetbrains:annotations:${project.annotations_version}")
    forgeDependencies(implementation("blue.endless:jankson:${project.jankson_version}"))
    shadowCommon("blue.endless:jankson:${project.jankson_version}")
    modImplementation "dev.architectury:architectury-forge:${project.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) {
        transitive = false
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    relocate "hardcorequesting.common", "hardcorequesting.common.forge"
    relocate "blue.endless.jankson", "hardcorequesting.common.forge.blue.endless.jankson"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "forge"
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}
