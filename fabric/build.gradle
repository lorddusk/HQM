plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

repositories {
    maven {
        url "https://ladysnake.jfrog.io/artifactory/mods"
        content {
            includeGroup "io.github.onyxstudios.Cardinal-Components-API"
        }
    }
    maven {
        url "https://mod-buildcraft.com/maven"
        content {
            includeGroup "alexiil.mc.lib"
        }
    }
}

configurations {
    shadowCommon
}

architectury {
    platformSetupLoomIde()
    fabric()
}

dependencies {
    modImplementation("net.fabricmc:fabric-loader:${project.fabric_loader_version}")
    modApi("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
    modApi("me.shedaniel:RoughlyEnoughItems-api:${project.roughlyenoughitems}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modRuntimeOnly("me.shedaniel:RoughlyEnoughItems-fabric:${project.roughlyenoughitems}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    depend("org.jetbrains:annotations:19.0.0")
    depend("io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:${project.cardinal_components}")
    depend("io.github.onyxstudios.Cardinal-Components-API:cardinal-components-entity:${project.cardinal_components}")
    depend("alexiil.mc.lib:libblockattributes-core:${project.lba}")
    depend("alexiil.mc.lib:libblockattributes-fluids:${project.lba}")
    depend("blue.endless:jankson:1.2.0")
    modImplementation("me.shedaniel.cloth.api:cloth-api:${project.cloth}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    implementation(project(path: ":common", configuration: "dev")) {
        transitive = false
    }
    developmentFabric(project(path: ":common", configuration: "dev")) {
        transitive = false
    }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) {
        transitive = false
    }
}

def depend(String string) {
    dependencies.modApi(string) {
        exclude(group: "net.fabricmc.fabric-api")
    }
    dependencies.include(string)
}

loom {
    accessWidenerPath = file("src/main/resources/hqm.accesswidener")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    relocate "hardcorequesting.common", "hardcorequesting.common.fabric"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "fabric"
}

jar {
    from "LICENSE"
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
