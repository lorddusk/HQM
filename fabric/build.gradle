plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

repositories {
    maven {
        url "https://ladysnake.jfrog.io/artifactory/mods"
        content {
            includeGroup "dev.onyxstudios.cardinal-components-api"
        }
    }
    maven { url = "https://nexus.resourcefulbees.com/repository/maven-public/"}
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

architectury {
    platformSetupLoomIde()
    fabric()
}

dependencies {
    modImplementation("net.fabricmc:fabric-loader:${project.fabric_loader_version}")
    modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")

    // Used for some extra events/hooks
    modImplementation "dev.architectury:architectury-fabric:${project.architectury_version}"

    modApi("me.shedaniel:RoughlyEnoughItems-api:${project.roughlyenoughitems}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modRuntimeOnly("me.shedaniel:RoughlyEnoughItems-fabric:${project.roughlyenoughitems}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    depend("org.jetbrains:annotations:23.0.0")

    // Used for storing player-attached data
    depend("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cardinal_components}")
    depend("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cardinal_components}")
    // Used for testing the fluid system
    modRuntimeOnly 'RebornCore:RebornCore-1.19:+'
    modRuntimeOnly 'TechReborn:TechReborn-1.19:+'
    // Used for parsing the config file
    depend("blue.endless:jankson:1.2.1")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) {
        transitive = false
    }
}

def depend(String string) {
    dependencies.modApi(string) {
        exclude(group: "net.fabricmc.fabric-api")
    }
    dependencies.include(string)
}

loom {
    accessWidenerPath = file("src/main/resources/hqm.accesswidener")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    relocate "hardcorequesting.common", "hardcorequesting.common.fabric"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "fabric"
}

jar {
    from "LICENSE"
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

loom {
    runs {
        gametest {
            server()
            name "Game Test"
            vmArg "-Dfabric-api.gametest"
            vmArg "-Dfabric-api.gametest.report-file=${project.buildDir}/junit.xml"
            runDir "build/gametest"
        }
    }
}
test.dependsOn runGametest
